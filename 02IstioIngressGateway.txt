 1.  Set up the istioinaction namespace for our services:

kubectl create ns istioinaction

 2.  Deploy the web-api, recommendation and purchase-history services along with the sleep service into the istioinaction namespace:

kubectl apply -n istioinaction -f sample-apps/web-api.yaml
kubectl apply -n istioinaction -f sample-apps/recommendation.yaml
kubectl apply -n istioinaction -f sample-apps/purchase-history-v1.yaml
kubectl apply -n istioinaction -f sample-apps/sleep.yaml
 3.  After running these commands, you should check that all pods are running in the istioinaction namespace:

kubectl get po -n istioinaction

Configure the inbound traffic

 4.  Use this GATEWAY_IP address to reach the gateway:

kubectl get svc -n istio-system
export GATEWAY_IP=$(kubectl get svc -n istio-system istio-ingressgateway -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
export INGRESS_PORT=80
export SECURE_INGRESS_PORT=443


>cat sample-apps/ingress/web-api-gw.yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: web-api-gateway
spec:
  selector:
    istio: ingressgateway 
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "istioinaction.io"
	
>cat sample-apps/ingress/web-api-gw-vs.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: web-api-gw-vs
spec:
  hosts:
  - "istioinaction.io"
  gateways:
  - web-api-gateway
  http:
  - route:
    - destination:
        host: web-api.istioinaction.svc.cluster.local
        port:
          number: 8080
		  
 7.  Check the service port for the web-api service in the istioinaction namespace

kubectl get service web-api -n istioinaction
NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
web-api   ClusterIP   10.43.149.232   <none>        8080/TCP   14m

 8.  Apply the Gateway and VirtualService resources to expose your web-api service outside of the Kubernetes cluster:

kubectl -n istioinaction apply -f sample-apps/ingress/


 9.  The Istio ingress gateway will create new routes on the proxy that you should be able to call from outside of the Kubernetes cluster:

curl -H "Host: istioinaction.io" http://$GATEWAY_IP:$INGRESS_PORT

 10.  Query the gateway configuration using the istioctl proxy-config command:

istioctl proxy-config routes deploy/istio-ingressgateway.istio-system

 11.  If you want to see an individual route, you can ask for its output as json like this:

istioctl proxy-config routes deploy/istio-ingressgateway.istio-system --name http.80 -o json

[
    {
        "name": "http.80",
        "virtualHosts": [
            {
                "name": "istioinaction.io:80",
                "domains": [
                    "istioinaction.io",
                    "istioinaction.io:*"
                ],
                "routes": [
                    {
                        "match": {
                            "prefix": "/"
                        },
                        "route": {
                            "cluster": "outbound|8080||web-api.istioinaction.svc.cluster.local",
                            "timeout": "0s",
                            "retryPolicy": {
                                "retryOn": "connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes",
                                "numRetries": 2,
                                "retryHostPredicate": [
                                    {
                                        "name": "envoy.retry_host_predicates.previous_hosts"
                                    }
                                ],
                                "hostSelectionRetryMaxAttempts": "5",
                                "retriableStatusCodes": [
                                    503
                                ]
                            },
                            "maxGrpcTimeout": "0s"
                        },
                        "metadata": {
                            "filterMetadata": {
                                "istio": {
                                    "config": "/apis/networking.istio.io/v1alpha3/namespaces/istioinaction/virtual-service/web-api-gw-vs"
                                }
                            }
                        },
                        "decorator": {
                            "operation": "web-api.istioinaction.svc.cluster.local:8080/*"
                        }
                    }
                ],
                "includeRequestAttemptCount": true
            }
        ],
        "validateClusters": false
    }
]

Secure the inbound traffic
 12.  Create a TLS secret for istioinaction.io in the istio-system namespace:

kubectl create -n istio-system secret tls istioinaction-cert --key labs/02/certs/istioinaction.io.key --cert labs/02/certs/istioinaction.io.crt
 13. Update the Istio ingress-gateway to use this cert:

cat labs/02/web-api-gw-https.yaml

apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: web-api-gateway
  namespace: istioinaction
spec:
  selector:
    istio: ingressgateway 
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "istioinaction.io"    
    tls:
      mode: SIMPLE
      credentialName: istioinaction-cert

 14.  Apply the web-api-gw-https.yaml in the istioinaction namespace. Since this gateway resource is also called web-api-gateway, it will replace our prior web-api-gateway configuration for port 80.

kubectl -n istioinaction apply -f labs/02/web-api-gw-https.yaml

 15.  Call the web-api service through the Istio ingress-gateway on the secure 443 port:

curl --cacert ./labs/02/certs/ca/root-ca.crt -H "Host: istioinaction.io" https://istioinaction.io:$SECURE_INGRESS_PORT --resolve istioinaction.io:$SECURE_INGRESS_PORT:$GATEWAY_IP

 16.  If you call it on the 80 port with http, it will not work as you no longer have the gateway resource configured to be exposed on port 80.

curl -H "Host: istioinaction.io" http://$GATEWAY_IP:$I

