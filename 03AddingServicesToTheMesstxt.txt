-- Adding services to the mess

Sidecar injection
Automatic Sidecar Injection
We will use automatic sidecar injection for this lesson.

 1.  To enable the automatic sidecar injection, use the command below to add the istio-injection label to the istioinaction namespace:

kubectl label namespace istioinaction istio-injection=enabled
 2.  Validate the istioinaction namespace is annotated with the istio-injection label:

kubectl get namespace -L istio-injection
Service Requirements
 3.  Check the above requirements for each of the Kubernetes services and make adjustments as necessary. If you don't have NET_ADMIN security rights, you would need to explore the Istio CNI plugin to remove the NET_ADMIN requirement for deploying services.

 4.  Using the web-api service as an example, you can review its service and deployment descriptor:

cat sample-apps/web-api.yaml
 5.  From the service descriptor, the name: http declares the http protocol for the service port 8080:

  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8081
 6.  From the deployment descriptor, the app: web-api label matches the web-api service's selector of app: web-api so this deployment and its pod are associated with the web-api service. Further, the app: web-api label and version: v1 labels provide contextual information for metrics and tracing. The containerPort: 8081 declares the listening port for the container, which matches the targetPort: 8081 in the web-api service descriptor earlier.

  template:
    metadata:
      labels:
        app: web-api
        version: v1
      annotations:
    spec:
      serviceAccountName: web-api
      containers:
      - name: web-api
        image: nicholasjackson/fake-service:v0.7.8
        ports:
        - containerPort: 8081
Adding services to the mesh
 7.  Add a sidecar to each of the services in the istioinaction namespace, starting with the web-api service:

kubectl rollout restart deployment web-api -n istioinaction
 8.  Validate the web-api pod is running with Istio's default sidecar proxy injected:

kubectl get pod -l app=web-api -n istioinaction
You should see 2/2 in the output. This indicates the sidecar proxy is running alongside the web-api application container in the web-api pod:

NAME                       READY   STATUS    RESTARTS   AGE
web-api-7d5ccfd7b4-m7lkj   2/2     Running   0          9m4s
 9.  Validate the web-api pod log looks good:

kubectl logs deploy/web-api -c web-api -n istioinaction
 10.  Validate you can continue to call the web-api service securely:

curl --cacert ./labs/02/certs/ca/root-ca.crt -H "Host: istioinaction.io" https://istioinaction.io:$SECURE_INGRESS_PORT --resolve istioinaction.io:$SECURE_INGRESS_PORT:$GATEWAY_IP
Understand what happens
 11.  Use the command below to get the details of the web-api pod:

kubectl get pod -l app=web-api -n istioinaction -o yaml
From the output, the web-api pod contains 1 init container and 2 normal containers. The Istio mutating admission controller was responsible for injecting the istio-init container and the istio-proxy container.

Istio-init Container:
 12.  Run the following command to learn more about flags for istio-iptables:

kubectl exec deploy/web-api -c istio-proxy -n istioinaction -- /usr/local/bin/pilot-agent istio-iptables --help
The output explains the flags such as -u, -m, and -i which are used in the istio-init container's args. You will notice that all inbound ports are redirected to the Envoy Proxy container within the pod. You can also see a few ports such as 15021 which are excluded from redirection (you'll soon learn why this is the case). You may also notice the following securityContext for the istio-init container. This means that a service deployer must have the NET_ADMIN and NET_RAW security capabilities to run the istio-init container for the web-api service or other services in the Istio service mesh. If the service deployer can't have these security capabilities, you can use the Istio CNI plugin which removes the NET_ADMIN and NET_RAW requirement for users deploying pods into Istio service mesh.

Add More Services:
 13.  Add the istio-proxy sidecar to the other services in the istioinaction namespace:

kubectl rollout restart deployment purchase-history-v1 -n istioinaction
kubectl rollout restart deployment recommendation -n istioinaction
kubectl rollout restart deployment sleep -n istioinaction
 14.  Validate that all the pods in the istioinaction namespace are running with Istio's default sidecar proxy injected:

kubectl get pods -n istioinaction
 15.  Validate that you can continue to call the web-api service securely:

curl --cacert ./labs/02/certs/ca/root-ca.crt -H "Host: istioinaction.io" https://istioinaction.io:$SECURE_INGRESS_PORT --resolve istioinaction.io:$SECURE_INGRESS_PORT:$GATEWAY_IP
Visualize your services
 16.  Generate some load to the data plane (by calling our web-api service) so that you can observe interactions between your services:

for i in {1..100};
  do curl --cacert ./labs/02/certs/ca/root-ca.crt -H "Host: istioinaction.io" https://istioinaction.io:$SECURE_INGRESS_PORT  --resolve istioinaction.io:$SECURE_INGRESS_PORT:$GATEWAY_IP;
  sleep 3;
done
 17.  On the tab labelled Terminal 2, enable access to Kiali using the command below:

istioctl dashboard kiali --browser=false --address 0.0.0.0
Distributed tracing
 18.  Press ctrl+C to end the prior istioctl dashboard kiali command, and use the command below to enable access the Jaeger dashboard:

istioctl dashboard jaeger --browser=false --address 0.0.0.0
Navigate to the Jaeger UI tab. On the "Service" dropdown, select "istio-ingressgateway". Click on the "Find Traces" button at the bottom. You should see 10 traces, which show every request to the web-api service through the Istio's ingress gateway.

Click on one of the traces to view the details of the distributed traces for that request. For example, this request from the picture below has a duration of 6ms and six trace spans among four services. Why are there six trace spans shown? You can click on each trace span to learn more about it. You may notice all trace spans have the same value for the x-request-id header. Why? This is how Jaeger knows these trace spans are part of the same request. In order for your services' distributed tracing to work properly in your Istio service mesh, the B-3 trace headers including x-request-id have to be propagated between your services.

Istio Control Plane
 19.  Press ctrl+C to end the prior istioctl dashboard jaeger command, and use the command below to enable access to the Grafana dashboard:

istioctl dashboard grafana --browser=false --address 0.0.0.0
Istio Service Dashboard
 20.  Generate some load if needed on the Terminal 1:

for i in {1..100};
  do curl --cacert ./labs/02/certs/ca/root-ca.crt -H "Host: istioinaction.io" https://istioinaction.io:$SECURE_INGRESS_PORT  --resolve istioinaction.io:$SECURE_INGRESS_PORT:$GATEWAY_IP;
  sleep 3;
done
